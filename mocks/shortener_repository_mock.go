// Code generated by MockGen. DO NOT EDIT.
// Source: shortener_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShortenerRepository is a mock of ShortenerRepository interface.
type MockShortenerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerRepositoryMockRecorder
}

// MockShortenerRepositoryMockRecorder is the mock recorder for MockShortenerRepository.
type MockShortenerRepositoryMockRecorder struct {
	mock *MockShortenerRepository
}

// NewMockShortenerRepository creates a new mock instance.
func NewMockShortenerRepository(ctrl *gomock.Controller) *MockShortenerRepository {
	mock := &MockShortenerRepository{ctrl: ctrl}
	mock.recorder = &MockShortenerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenerRepository) EXPECT() *MockShortenerRepositoryMockRecorder {
	return m.recorder
}

// GetOriginalURL mocks base method.
func (m *MockShortenerRepository) GetOriginalURL(context context.Context, shortenedURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalURL", context, shortenedURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalURL indicates an expected call of GetOriginalURL.
func (mr *MockShortenerRepositoryMockRecorder) GetOriginalURL(context, shortenedURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalURL", reflect.TypeOf((*MockShortenerRepository)(nil).GetOriginalURL), context, shortenedURL)
}

// IfURLAlreadyExists mocks base method.
func (m *MockShortenerRepository) IfURLAlreadyExists(context context.Context, long_url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IfURLAlreadyExists", context, long_url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IfURLAlreadyExists indicates an expected call of IfURLAlreadyExists.
func (mr *MockShortenerRepositoryMockRecorder) IfURLAlreadyExists(context, long_url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IfURLAlreadyExists", reflect.TypeOf((*MockShortenerRepository)(nil).IfURLAlreadyExists), context, long_url)
}

// SaveShotenedURL mocks base method.
func (m *MockShortenerRepository) SaveShotenedURL(context context.Context, url, shortenedURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveShotenedURL", context, url, shortenedURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveShotenedURL indicates an expected call of SaveShotenedURL.
func (mr *MockShortenerRepositoryMockRecorder) SaveShotenedURL(context, url, shortenedURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveShotenedURL", reflect.TypeOf((*MockShortenerRepository)(nil).SaveShotenedURL), context, url, shortenedURL)
}
